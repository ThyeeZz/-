1、执行栈
  当我们调用一个方法的时候，js回生成一个与这个方法相对应的执行环境context。而当一系列方法被依次
  调用的时候，因为js时单线程的，同一时间只能执行一个方法，于是这些方法被排队在一个单独的地方，
  就叫执行栈

2、事件队列
  当js遇到一个异步事件后不会一直等待其返回结果，而是会将这个事件挂起，继续执行栈中的其他任务。
  当一个异步事件返回结果后，js会将这个事件加入与当前执行栈不同的队列，叫事件队列callback queue;

  被放入事件队列不会立即执行其回调，而是等待当前栈中所有任务都执行完毕，主线程空闲状态，主线程回去查找事件
  队列中是否有任务，如果有，取出排在第一位的事件，并把这个事件对应的回调放到执行栈中，执行其同步代码。

3、微任务和宏任务
  常见微任务 Micro-Task：new Promise().then(callback),MutationObserve，await 后面的代码
  常见的宏任务 Macro-Task：setTimeout,setInterval,script,I/O操作,UI交互事件等

4、执行顺序
  1· 从宏任务的头部取出一个任务执行；
  2· 执行过程中若遇到微任务则将其添加到微任务的队列中；
  3· 宏任务执行完毕后，微任务的队列中是否存在任务，若存在，则挨个儿出去执行，直到执行完毕；
  4· GUI 渲染；
  5· 回到步骤 1，直到宏任务执行完毕；