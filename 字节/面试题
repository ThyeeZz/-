HTML：
1、Html 语义化的理解
  结构更清晰，更容易阅读

2、DOCTYPE的作用
  申明文档解析的类型

3、标准模式与怪异模式的区别
  标准：width、height不包含border、padding、margin
  怪异：包含了

4、文档流
  文档排列的方式

5、行内、块级、行内会计、空
  · span i strong
  · div li ul p h 
  · img
  · br hr 

6、html的新特性
  header footer nav article section 

7、描述 cookie sessionStorage localStorage 的区别
  cookie：存在内存中与服务端交互，以键值对形式存在，如果不设置过期时间会话关闭即删除
  session：存在硬盘中，不与服务端交互，会话关闭即删除
  local：存在硬盘中，不与服务端交互，理论上不手动清除永久存在

8、iframe 内嵌框架有哪些缺点
  不会

9、说一下webWorker、webSocket
  webSocket：实现客户端服务端都可以主动发起数据的模式
  webWorker：不清楚

CSS:
1、三栏布局写一下
  .left{
    width: 200px;
    float: left;
    &::after{
      content: '';
      clear: both;
    }
  }
  .main{
    margin: 0 200px;
  }
  .right{
    width: 200px;
    float: right;
    &::after{
      content: '';
      clear: both;
    }
  }

2、垂直水平居中
  div{
    width: 500px;
    height: 500px;
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%，-50%);
  }

3、transorm 讲一下
  transform 用于变形，主要概念有translate平移、scale缩放等等

4、平常实现动画是怎么区实现的
  一个是通过transion 监听div的变化
  一个是使用 animation+ keyframes

5、flex有那些属性
  flex-direction、justyficontent、alignitems、aligncontent、shrink、grow、alignself

6、盒模型：标准和模型和IE盒模型
  标准：margin padding border content

7、权重问题
  important > 内联 > id > class > 标签 > *

8、css中那些属性可以被继承
  font系列的：size family weight color 

9、box-sizing常用的属性
  content-box： 正常盒模型，宽高不包含。。。
  border-box: 怪异盒模型，宽高包含border padding margin 

10、link 和 @import的区别
  @import 由css 提供，

11、a标签四个伪类的顺序，并解释
  l: link v:visited h:hover a:active  

12、z-index
  只对脱离本文流的有效

13、flex布局后，子元素的float clear vertical-align 将失效

14、BfC、触发条件，可解决的问题
  块级格式化上下文，内部样式不会影响外部。解决了margin 塌陷问题；
  position值为absolute、fixed；overflow不为visible；float、diaplay值为flex，table等等

15、伪类和微元素的区别
  伪类的操作对象是文档书中已有的元素。而微元素则创建了一个文档书外的元素

16、浏览器如何解析css选择器的？ 从右向左

17、px em rem 的区别
  px绝对单位，em以父级元素的font-size为基准，rem以根元素

18、css 创建一个三角形

19、css动画与js动画的区别
20、css3新特性：圆角，阴影、动画、渐变、转换
21、css3新增伪类

JS
1、js原型、原型链
  每一个js对象都有隐藏属性__proto__，指向原型对象，循环

2、instanceof 方法讲一下
  判断目标的原型链上是否有 右边的原型对象

3、判断是否为数组的几种方式
  Object.prototype.toString.call;isntanceof  constructor

4、作用域链
  函数定义时可以访问到的变量范围。

5、手写一个闭包
6、讲一下工作中那些地方用到了闭包
  函数防抖 函数节流、单例模式
7、promise的实现
  见html文件
8、数组map forEach的实现
  见html文件
9、作用域和作用域链
  作用域：函数定义时能够访问的变量范围
  链：可以访问父级的作用域，父级也可以访问她的父级形成的链
10、使用闭包实现每秒打印1,2,3,4
  见html
11、继承的几种方式、寄生组合继承的实现、es5与es6继承的区别
  原型链继承、constructor继承、对象冒充+原型继承
12、typeof NaN 的结果是什么、isNaN与Number.isNaN函数的区别
  'number'
  isNaN 会调用Number方法，所有转不了的都返回true
  Number.isNaN 会闲判断对象是不是 number类型，所以要更加准确一下
13、js 的节流与防抖
  见html
14、{} 和 [] 的 valueOf 和 toString 的结果是什么
  {}：{}，"[object Object]"
  []: [], ""
15、js 的垃圾回收 与 v8 的垃圾回收
16、Iterator和for…of
17、数组去重、扁平化
  见html

Vue
1、双向绑定原理
  Object.definedProperty 劫持对象的get set
  Arrar 通过重写变异方法来 来触发notyfy 函数

2、Vue的组件通信
  prop，emit触发事件、调用父组件的方法传递数据、eventbus、state、Vue.obeservable

3、Vue 组件中的data为什么要写成函数形式
  复用的时候形成自己的data 不会互相影响
4、nextTick
  可以访问到下一次适途更新后的状态

5、模板编译原理
  第一步通过大量正则讲template 转换为 AST语法书
  第二部通过标记静态点进行优化
  第三部通过createElemnt函数将AST语法书转换为vnode

6、vue中 key值的作用
  区别同级的两个vnode 可以针对性惊醒更新

7、vue中常见修饰符
  事件：stop prevent once self
  按键：trim、enter、
8、vue中常用指令
  v-for v-show v-if v-model v-bind 

React
1、setState的原理以及为啥是异步 
  1· setState 不会立即更新，会将多个多个setState 一个个加入队列，然后批量处理
  2· 通过回调查看是否更新
    setState({
      val: this.state.val + 1
    },function(){
      console.log(this.state.val)
    })
  3· setState的另一种方式
    setState的第一个参数传入函数，改函数会被压入调用栈，在state真正该百年后按顺序
    回调站里面的函数，改函数的第一个参数为上一次更新后的state
    setState((state,props)=>({
      val:state.val + props
    })})

2、diff算法
  将jsx 通过 createElement转化为 虚拟dom 进行同级比较

3、生命周期
  mounting: constructor -> componentWillMount -> render -> componentDidMount
  updating: componentWillReciveProps -> willUpdate -> shouldUpdate -> render -> didUpdate
  unmounting: componentWillUnmount -> componentDidUnmount

4、hooks
  1· 复杂组建难以理解：再将多个功能逻辑分离到多个生命周期中
  2· 难以理解的class

浏览器
1、浏览器缓存
  强缓存、协商缓存
  · 请求先去查看是否有缓存，http1.1 使用 max-age来控制，命中强缓存直接从内存中获取资源
  · 未命中强缓存，发起http请求，服务器根据lastModified 来判断是否修改，未修改返回304
  修改了返回200以及资源

2、浏览器同源策略
  同协议、域名、端口即为同源

3、跨域
  cors：options 请求
  代理：webpack集成
  jsonp：利用同源策略不会拦截script标签

4、浏览器的渲染
  解析html文件 未html树；解析css未css树 合并生render树
  渲染机制是在每个宏任务及其微任务完成后

5、回流为什么会比重回更小号性能
  因为回流会导致浏览器重新排列所有的dom 然后再重绘

6、浏览器的进程与线程
7、cookie、session token
8、输入url 后发生了什么
  url解析 -- 查看缓存 -- 发起请求 -- 返回资源 -- 解析 -- 渲染

Webpack
1、什么是webpack
  资源打包工具

2、热更新原理
  compiler.watch 对本地文件打包，监听本地文件发生变化 --> 重新打包 --> 继续监听
  发生改变通知浏览器


关于闭包
1、(()=>{
  function a (){}
})()
属于闭包吗？
