1、Symbol
  1· Symbol 定义、读取对象属性要使用[]
  2· 遍历对象的时候，该属性不不会出现在for...in,Object.keys(),Object.getOwnPropertyNames(),JSON.stringify()
    可以通过 Object.getOwnPropertySymbols()返回

2、常见的页面性能优化
  1· 雪碧图、减少http请求，合并压缩css,js
  2· http上有那些优化手段：减少http请求，使用雪碧图，图片懒加载，合理利用缓存 --> 说说缓存
  3· 重排和重绘的概念，如何避免
    重排：重排会导致浏览器重新计算整个文档，重新构建新的渲染树，出发重排：font-size,font-family,改变dom内外边距，
        滚动条滚动，改变窗口大小等等
    重绘：元素外观改变发生重绘，重绘无可避免，只能尽量将多个重排重绘合并一次执行
      (比如需要想dom添加多个节点，每次添加都会导致重排重绘，可以通过创建一个碎片文档document.createDocumentFragment()，全部添加完一次性添加到DOM中)

3、TCP的三次握手和四次挥手
  1· 三次握手：客户端首先发送SYN(同步编号，是建立连接时的信号)消息，服务端接受到发送ACK包进行响应，同时发送SYN包，客户端接收到
    SYN包发送ACK进行确认，连接建立；
  
  2· 四次挥手：客户端发送FIN 表示断开连接，服务端接收到发送ACK 进行确认，此时TCP链接已经释放，只是服务端可能有未完成的数据传输任务，
    等待数据传输完毕，服务端发送释放连接报文FIN ，客户端收到后发送ACK 包进行确认，服务端收到后即断开连接。 

4、小程序的线程
  1·小程序有两个线程：渲染层：webView,逻辑层：JsCore
    逻辑层：创建一个单线程去执行JS逻辑，由于JS不跑在webView中，所以无法通过js操作Dom，没有window对象
    渲染层：小程序的渲染逻辑全部在webView，通过逻辑层控制渲染那些页面，由于小程序有多个页面，所以有多个webView线程

  2·小程序的数据更新机制
    小程序采用Virtual DOM 模拟Dom树,将WXML 转换成对应JS对象 --> 比较两颗虚拟DOM的差异 --> 将差异应用到真正DOM树上

5、Vue2.x 的diff算法
  以对象形式模拟虚拟DOM树，两颗虚拟DOM树进行同层级比较，更新被更新的地方，数据发生改变通过Notyfy 通知所有订阅者

6、Vue的 compile 过程
  compile过程主要是为了生成渲染模板render，而render的作用是为了生成和真是dom相同的虚拟节点
  1· parse：接受template原始模板。通过大量正则生成对应的AST语法树
  2· optimize：递归遍历每一个AST节点，标记静态节点，以优化性能
  3· generate：吧前两部生成AST树组装成render字符串

7、谈谈Vuex
  Vuex 是Vue.js的公共状态管理模式
  核心概念：state,getter,mutation,action,module
  
8、Event Loop

9、缓存机制
  1· 强缓存：返回码200，直接从cache-disk 中读取资源
  2· 协商缓存，返回no-cache: 不适用本地缓存，重新请求，根据lastModified判断->304，未修改，使用本地缓存->200，则返回资源

10、输入[1,3,1,3,2]，输出数组中唯一一个只存在一项的值，比如如上就是 2

