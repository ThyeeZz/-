1、浏览器内核
  ie: trident
  firefox: presto
  opreal: gacko
  safari: webkit
  chrome: blink

2、BFC 清除浮动
  block format content 格式化上下文，内部样式不会影响外部：display： absolute；overflow：hidden；float引发
  清除浮动：&::after{
    content: '',
    clear: both
  }

3、h5新特性
  语义化标签，是文章结构更清晰，易于维护：header、footer、section、article、asider、nav

4、继承、原型链、this指向、设计模式、call, apply, bind
  es5：对象冒充+原型链继承 es6： extends
  原型链： 每一个对象都有一个私有属性：__proto__，它指向他的构造函数的原型对象(prototype),
    该原型对象又有自己的对象原型指向其构造函数的原型对象，形成的链条脚原型链，终点是null
  this指向：
    a): 最终谁调用函数，函数中this就指向谁
    b): 构造函数中的this：
      一般指向实例，
      但是遇到return 时：如果返回的是对象，指向返回的对象，否则指向构造出来的的实例
      function fn() {  
        this.user = '追梦子';  
        return function(){};
      }
      var a = new fn;  
      console.log(a.user); //undefined

      function fn() {  
        this.user = '追梦子';  
        return 1;
      }
      var a = new fn;  
      console.log(a.user); //追梦子

    c): 箭头函数指向定义时的上下文，在object中有个例外：
      var obj = {
        i: 10,
        b: () => console.log(this.i, this),
        c: function() {
          console.log( this.i, this)
        }
      }
      obj.b();  // undefined window{...}
      obj.c();  // 10 Object {...}

5、new实现、防抖节流、let, var, const 区别、暂时性死区、event loop
  1)、new实现：创建一个空对象 --> 将this指向这个空对象 --> 执行构造函数中的代码 --> 返回该对象
  手写new 代码：
    function _new(constructor,...args){
      let instance = {}; // 创建空对象
      constructor.call(instance,...args); // 将this指向该对象，并执行构造函数
      return instance // 返回该对象
    }
    const person = _new(Person,'小王',13)
  
  2)、防抖函数
    function debounce(func, time) {
      let timer = null;
      return function () {
        if (timer) {
          clearTimeout(timer);
          timer = null
        }
        timer = setTimeout(func, time * 1000)
      }
    }

    节流函数
    function throttle(fn,delay){
      let timer = null;
      return function(){
        let _this = this;
        let args = arguments;
        if(timer){
          return
        }
        timer = setTimeout(()=>{
          fn.apply(_this,args);
          timer = null;
        },delay * 1000)
      }
    }
  4) let const var
    暂时性死区：代码块内 let命令声明变量之前，变量均是不可用的
    预编译：发生在函数执行的前一刻
      创建AO对象 --> 将形参名和变量声明的命作为AO 对象的属性名:undefined --> 将实参和形参相统一 -->在函数体内找函数声明作为AO属性名，值为function

  5) event loop
    宏任务(macro-task): 包括整体代码、setTimeout setInterval ajax dom操作等等
    微任务(micro-tast): Promise
    Promise: 在new Promise()中传入的回调回立即执行,但他的then方法属于微任务
    process.nextTick: 放在执行栈最尾部,不属于宏任务,为任务,所以总是发生在所有异步任务之前
    setImmediate: 放在任务栈的最底部,但是setTimeout 优先于setImmediate,但是有可能detImmediate先执行

    同步代码（宏任务） > process.nextTick > Promise（微任务）> setTimeout(fn)、setInterval(fn)（宏任务）> setImmediate（宏任务）> setTimeout(fn, time)、setInterval(fn, time)，其中time>0

  6）Promise
    并行执行和顺序执行
  
6、闭包、垃圾回收

7、Vue数据双向绑定原理
  Object.definedProperty 数据劫持
  核心：observe、dep、watcher
  observe: 遍历data中的属性，对其进行数据劫持
  dep：每个属性拥有自己的消息订阅器dep，用来存放所有订阅了该属性的观察者
  watcher：观察者对象，通过dep实现对相应属性的监听，监听到结果后主动触发自己的回调进行响应

8、computed和watch的差异、computed的实现原理
  差异: a) computed是计算一个新的属性，并将该属性挂在到vm实例上，二watch只是监听已经存在的属性，所以watch同样可以监听computed
      b)computed是一个惰性求值观察者，具有缓存属性，只有当依赖变化后第一次访问computed才会重新计算，而watch，每次变化都会计算

9、mvc、mvvm模式理解
  mvc: Model: 模型 持有所有的数据状态和业务逻辑; 泛指数据库,链接数据库,建立数据模型
      View: 视图 用来展示数据模型在页面上,泛指前端
      Controller: 控制器, 接收用户的数据,进行逻辑处理后,传给model. 泛指后端
      优点: 模块化 易复用
  mvvm: Model: 数据层,泛指数据库
        View:视图层,泛指前端
        ViewModel:监听模型数据的改变和用户的输入等行为,处理用户的交互逻辑;简单说,就是一个连接
        model和view的对象.
        view和model是相互独立的,通过vm(viewmodel)这个连接的对象或者说桥梁来实现同步响应式的

10、HTTP1, HTTP2, HTTPS、常见的http状态码
  a) HTTPS:具有ssl加密的传输协议
  b) 状态码：
    2xx：成功状态码：
      200：OK 处理成功并返回
      204：No Content 处理成功，无资源可返回
      206：Patial Content 客户端进行了范围请求，已经处理并返回范围内的实体内容
    3xx：重定向
      301：永久重定向，请求资源被分配到新的url，之后应该使用新的url
      302：临时重定向，本次请求需要访问新的url
      303：临时，本次请求需要访问新的url并使用EGT方法请求
      304：未修改
    4xx：客户端错误
      400： badrequest，报文语法错误
      401：unauthorized：未经许可
      403：forbidden，拒绝访问
      404：notfound 服务器上找不到请求资源
    5xx：服务端错误
      500：服务器执行时发生错误
      503：服务器超负载或者正在维护，无法处理

11、浏览从输入网址到回车发生了什么
  输入网址-->解析为域名-->向该域名发送请求-->服务器处理请求，返回资源-->本地获取资源开始解析-->生成doom树，css树-->进行渲染
                        （判断是否有缓存，缓存是否过期）

12、TCP的三次握手和四次挥手
  握手：1)客户端发送第一个包，客户端进入发送钻杆太等待服务器确认
        2）服务器收到这个包，返回，服务器进入接收状态
        3）客户端收到包，发送第三个包，链接建立完毕
  挥手：1）主动关闭方发送第一个包
        2）被动关闭方收到包后，发送第二个包
        3）被动关闭方再发送第三个包
        4）主动关闭方发送第四个包，完成四次挥手

13、前端跨域、浏览器缓存、cookie, session, token, localstorage, sessionstorage
    i、前端跨域：协议、域名、端口都相同

    ii、浏览器缓存：浏览器更具第一次请求资源时返回的响应头来决定是否缓存
      a)、强缓存：直接从缓存中读取，network：200，size：from disk/memory cache
      b)、协商缓存：再强缓存失效后，向服务器发起请求，由服务器根据缓存标识决定是否需要缓存
        发起请求--》请求强缓存--》未过期--》返回该i缓存结果
                            --》过期--》携带标识想服务器发起请求
               --》请求强缓存失败，返回缓存标识--》携带该表示发起http请求--》服务器返回304，资源无更新--》获取该缓存的请求结果--》返回该i缓存结果
                                                                     --》资源更新了，服务器缓存200--》将请求结果和混村标识存入缓存中  
    iii、a)、cookie总是再同源的http请求中携带，sessiontorage和localStorage仅保存在本地。
        b)、session会话储存，local永久储存
        c)、cookie：name=value行是存在，浏览器关闭失效，或者设置过期时间，主要用于保存登陆信息

14、类型判断
  instanceof 可以正确判断对象的类型
    console.log({} instanceof Object);   // true
    console.log([] instanceof Array);    // true

  constructor：如果手动更改原型，就无法正确判断
    function Fn(){}
    Fn.prototype = new Array();
    const fn = new Fn();
    console.log(fn.constructor === Fn)  // false
    console.log(fn.constructor === Array)  // true

15、{}和[]的valueOf、toString的值
  valueOf({}) // {} {}.toString() // [object Objecct]
  valueOf([]) // [] [].token() // ''

16、闭包
  1)可以在函数外部访问函数内部的变量，可以创建私有变量
  2)因为被引用的变量不会被回收，可以用来储存变量
  创建单例模式
  // 单例
  function singleton(func){
    const _this = this;
    let instance;
    return function(){
      return instance || (instance = func.call(_this,arguments));
    }
  }

17、模块加载规范
  a)、CommonJS，使用 require来引入模块，module.exports定义模块输出接口
  b)、es6：import 和 export 来导入导出

18、一道笔试图

    function Foo() {
      getName = function () {
        console.log(1);
      };
      return this;
    }
    Foo.getName = function () {
      console.log(2);
    };
    Foo.prototype.getName = function () {
      console.log(3);
    };
    var getName = function () {
      console.log(4);
    };

    function getName() {
      console.log(5);
    }

    //请写出以下输出结果：
    Foo.getName();
    getName();
    Foo().getName();
    getName();
    new Foo.getName();
    new Foo().getName();
    new new Foo().getName();

    a)、Foo.getName()：调用Foo的静态方法   2
    b)、getName()：实际为 window.getName();  4
    c)、Foo().getName()：Foo执行返回的this指向window，并且将window上的getName函数覆盖了； 1
    d)、new Foo.getName()：实际上是实例化 Foo.getName函数，此时Foo.getName 打印2   2
    e)、new Foo().getName()：--> (new Foo()).getName() -->foo.getName()，foo上无此属性，所以去原型链上找-->3
    f)、new new Foo().getName() --> new (new Foo()).getName() -->new foo.getName() --> 实例化foo原型链上的getName函数 -->3

19、auguments
  非严格模式，不包含剩余参宿，默认参数，解构赋值的，arguments与实参互为映射；否则不追踪参数的值；

20、Object.prototype.hasOwnProperty(prop)
  返回布尔值，指示对象自身属性中是否有该指定属性

21、跨域，JSONP,CORS、CSRF、XSS
  a)、跨域：协议、域名、端口 相同才能请求资源
  b)、jSONP：跨域对通过HTML标签发起的资源请求时放行的。利用此规则，通过script标签进行请求，
      <script src='http://xxx.xx:8080/data?callback=getData></script>
      表示通过GET 请求某站点资源，请求成功调用getData回调函数；
      因为scripts标签无法设置requestBody，只能使用 EGT 请求。
  c)、CORS，每次请求之前先发送一个OPTIONS请求，询问该站点是否允许接下来的跨域，
  d)、CSRF，利用用户登陆状态，通过第三方站点来进行虚假请求。(跨域产生的原因)
      防护策略：验证来源站点、使用token
  e)、XSS：跨站脚本，指黑客在html文件中植入恶意脚本，用户使用时攻击用户的手段。
      i、储存型xss攻击：评论区提交一份脚本代码，上传到服务器，渲染页面时会被执行；
        防范：对用户输入信息进行过滤或转码，转码后的脚本在解析过程中无法被执行

      ii、反射型xss攻击：恶意脚本作为网络请求的一部分，随后网站讲脚本返给用户，执行。
        防范：httpOnly使js无法读取cookie、CSP